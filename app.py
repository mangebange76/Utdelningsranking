import streamlit as st
import pandas as pd
import gspread
import yfinance as yf
import time
from datetime import datetime
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="Utdelningsportf√∂lj", layout="wide")

# --- Ladda Google Sheets credentials ---
SHEET_URL = st.secrets["SHEET_URL"]
SHEET_NAME = st.secrets["SHEET_NAME"]

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

def skapa_koppling():
    return client.open_by_url(SHEET_URL).worksheet(SHEET_NAME)

def hamta_data():
    sheet = skapa_koppling()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def spara_data(df):
    sheet = skapa_koppling()
    sheet.clear()
    sheet.update([df.columns.values.tolist()] + df.astype(str).values.tolist())

# --- S√§kerst√§ll kolumner ---
def s√§kerst√§ll_kolumner(df):
    kolumner = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Valuta", "Direktavkastning (%)",
        "√Örlig utdelning", "N√§sta X-dag", "N√§sta utdelning", "Antal aktier",
        "GAV", "Portf√∂ljv√§rde", "√Örlig utdelning totalt", "Utdelning/m√•nad",
        "Uppside (%)", "Rekommendation"
    ]
    for col in kolumner:
        if col not in df.columns:
            df[col] = ""
    return df[kolumner]

# --- H√§mta data fr√•n Yahoo Finance ---
def hamta_yahoo_data(ticker):
    try:
        aktie = yf.Ticker(ticker)
        info = aktie.info

        namn = info.get("longName") or info.get("shortName") or ticker
        kurs = info.get("currentPrice")
        valuta = info.get("currency")
        utdelning = info.get("dividendRate")
        direktavkastning = info.get("dividendYield") * 100 if info.get("dividendYield") else None
        n√§sta_xdag = info.get("exDividendDate")
        if n√§sta_xdag:
            n√§sta_xdag = datetime.fromtimestamp(n√§sta_xdag).strftime("%Y-%m-%d")
        n√§sta_utd = info.get("lastDividendValue")

        return {
            "Bolagsnamn": namn,
            "Aktuell kurs": kurs,
            "Valuta": valuta,
            "√Örlig utdelning": utdelning,
            "Direktavkastning (%)": direktavkastning,
            "N√§sta X-dag": n√§sta_xdag,
            "N√§sta utdelning": n√§sta_utd
        }
    except Exception as e:
        st.error(f"Kunde inte h√§mta data f√∂r {ticker}: {e}")
        return {}

# --- Uppdatera rader med ber√§kningar ---
def uppdatera_ber√§kningar(df):
    for i, rad in df.iterrows():
        try:
            kurs = float(rad.get("Aktuell kurs") or 0)
            antal = float(rad.get("Antal aktier") or 0)
            utdelning_per_aktie = float(rad.get("√Örlig utdelning") or 0)

            # Portf√∂ljv√§rde per rad
            portf√∂ljv√§rde = kurs * antal
            df.at[i, "Portf√∂ljv√§rde"] = round(portf√∂ljv√§rde, 2)

            # √Örlig utdelning totalt
            total_utd = utdelning_per_aktie * antal
            df.at[i, "√Örlig utdelning totalt"] = round(total_utd, 2)

            # Utdelning per m√•nad
            df.at[i, "Utdelning/m√•nad"] = round(total_utd / 12, 2) if total_utd else 0

            # Uppsida ‚Äì h√§r kan du l√§gga logik f√∂r riktkurs
            riktkurs = kurs * 1.1  # Placeholder: +10% som exempel
            if kurs > 0:
                uppsida = ((riktkurs - kurs) / kurs) * 100
                df.at[i, "Uppside (%)"] = round(uppsida, 2)

            # Rekommendation
            if uppsida > 15:
                df.at[i, "Rekommendation"] = "K√∂p"
            elif uppsida > 5:
                df.at[i, "Rekommendation"] = "Beh√•ll"
            else:
                df.at[i, "Rekommendation"] = "S√§lj"
        except:
            pass
    return df

# --- Formul√§r f√∂r att l√§gga till eller uppdatera bolag ---
def lagg_till_eller_uppdatera(df):
    st.subheader("‚ûï L√§gg till eller uppdatera bolag")
    ticker = st.text_input("Ticker (t.ex. AAPL, 2020.OL)").strip().upper()

    if st.button("H√§mta fr√•n Yahoo Finance"):
        if ticker:
            data = hamta_yahoo_data(ticker)
            if data:
                if ticker in df["Ticker"].values:
                    idx = df[df["Ticker"] == ticker].index[0]
                    for key, value in data.items():
                        df.at[idx, key] = value
                else:
                    ny_rad = {"Ticker": ticker, **data, "Antal aktier": 0, "GAV": 0}
                    df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
                df = uppdatera_ber√§kningar(df)
                spara_data(df)
                st.success(f"Data uppdaterad f√∂r {ticker}")
        else:
            st.warning("Ange en ticker f√∂rst.")
    return df

# --- Massuppdatering av alla bolag ---
def massuppdatera(df):
    st.subheader("üîÑ Massuppdatera alla bolag")
    if st.button("Uppdatera nu"):
        for i, rad in df.iterrows():
            ticker = rad["Ticker"]
            if ticker:
                data = hamta_yahoo_data(ticker)
                for key, value in data.items():
                    df.at[i, key] = value
                df = uppdatera_ber√§kningar(df)
                spara_data(df)
                st.write(f"‚úÖ {ticker} uppdaterad")
                time.sleep(1)
        st.success("Alla bolag uppdaterade.")
    return df

# --- Visa portf√∂lj ---
def visa_portf√∂lj(df):
    st.subheader("üìä Portf√∂lj√∂versikt")
    total_v√§rde = df["Portf√∂ljv√§rde"].sum()
    total_utd = df["√Örlig utdelning totalt"].sum()
    st.metric("Portf√∂ljv√§rde", f"{total_v√§rde:,.2f} kr")
    st.metric("√Örlig utdelning", f"{total_utd:,.2f} kr")
    st.metric("Utdelning/m√•nad", f"{total_utd/12:,.2f} kr")

    st.dataframe(df)

# --- Visa kommande utdelningar ---
def kommande_utdelningar(df):
    st.subheader("üìÖ Kommande utdelningar")
    df_utd = df[df["N√§sta X-dag"] != ""].copy()
    df_utd["N√§sta X-dag"] = pd.to_datetime(df_utd["N√§sta X-dag"], errors="coerce")
    df_utd = df_utd.sort_values("N√§sta X-dag")
    st.dataframe(df_utd[["Ticker", "Bolagsnamn", "N√§sta X-dag", "N√§sta utdelning"]])

# --- Meny & main ---------------------------------------------------------------
def main():
    st.title("üìà Utdelningsportf√∂lj")

    # L√§s data fr√•n Google Sheets
    try:
        df = hamta_data()
    except Exception as e:
        st.error(f"Kunde inte l√§sa Google Sheet: {e}")
        return

    # S√§kerst√§ll kolumner √§ven om arket √§r tomt
    df = s√§kerst√§ll_kolumner(df)

    # Meny
    meny = st.sidebar.radio(
        "Meny",
        ["Portf√∂lj", "L√§gg till/uppdatera bolag", "Massuppdatera", "Kommande utdelningar"]
    )

    if meny == "Portf√∂lj":
        st.subheader("üì¶ Portf√∂lj")
        # Redigerbar vy f√∂r Antal aktier & GAV
        edit_cols = ["Antal aktier", "GAV"]
        vis_cols = [
            "Ticker","Bolagsnamn","Aktuell kurs","Valuta",
            "Antal aktier","GAV","Portf√∂ljv√§rde",
            "√Örlig utdelning","√Örlig utdelning totalt","Utdelning/m√•nad",
            "Direktavkastning (%)","N√§sta X-dag"
        ]
        # Re-ber√§kna innan visning
        df = uppdatera_ber√§kningar(df)
        view = df[vis_cols].copy()
        edited = st.data_editor(view, hide_index=True, use_container_width=True, num_rows="dynamic")

        colA, colB = st.columns(2)
        with colA:
            if st.button("üíæ Spara portf√∂lj√§ndringar"):
                # skriv tillbaka √§ndringar f√∂r Antal aktier & GAV
                for _, r in edited.iterrows():
                    t = r["Ticker"]
                    if t in df["Ticker"].values:
                        idx = df[df["Ticker"] == t].index[0]
                        for c in edit_cols:
                            df.at[idx, c] = r[c]
                df = uppdatera_ber√§kningar(df)
                spara_data(df)
                st.success("Portf√∂ljen sparad.")
        with colB:
            if st.button("üîÅ Uppdatera v√§rden (recalc)"):
                df = uppdatera_ber√§kningar(df)
                spara_data(df)
                st.success("V√§rden uppdaterade.")

        # Snabb-summering
        total_v√§rde = float(df["Portf√∂ljv√§rde"].fillna(0).sum())
        total_utd   = float(df["√Örlig utdelning totalt"].fillna(0).sum())
        c1,c2,c3 = st.columns(3)
        c1.metric("Portf√∂ljv√§rde", f"{total_v√§rde:,.2f} kr")
        c2.metric("√Örsutdelning", f"{total_utd:,.2f} kr")
        c3.metric("Utd/m√•nad", f"{(total_utd/12):,.2f} kr")

    elif meny == "L√§gg till/uppdatera bolag":
        df = lagg_till_eller_uppdatera(df)

    elif meny == "Massuppdatera":
        df = massuppdatera(df)

    elif meny == "Kommande utdelningar":
        kommande_utdelningar(df)


if __name__ == "__main__":
    main()
